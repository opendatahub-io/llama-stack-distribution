version: 2
image_name: rh
apis:
- agents
- datasetio
- eval
- inference
- safety
- scoring
- telemetry
- tool_runtime
- vector_io
- files
providers:
  inference:
  - provider_id: ${env.VLLM_URL:+vllm-inference}
    provider_type: remote::vllm
    config:
      url: ${env.VLLM_URL:=}
      max_tokens: ${env.VLLM_MAX_TOKENS:=4096}
      api_token: ${env.VLLM_API_TOKEN:=fake}
      tls_verify: ${env.VLLM_TLS_VERIFY:=true}
  - provider_id: ${env.AWS_ACCESS_KEY_ID:+bedrock}
    provider_type: remote::bedrock
    config:
      aws_access_key_id: ${env.AWS_ACCESS_KEY_ID:=}
      aws_secret_access_key: ${env.AWS_SECRET_ACCESS_KEY:=}
      aws_session_token: ${env.AWS_SESSION_TOKEN:=}
      region_name: ${env.AWS_DEFAULT_REGION:=}
      profile_name: ${env.AWS_PROFILE:=}
      total_max_attempts: ${env.AWS_MAX_ATTEMPTS:=}
      retry_mode: ${env.AWS_RETRY_MODE:=}
      connect_timeout: ${env.AWS_CONNECT_TIMEOUT:=60}
      read_timeout: ${env.AWS_READ_TIMEOUT:=60}
      session_ttl: ${env.AWS_SESSION_TTL:=3600}
  - provider_id: sentence-transformers
    provider_type: inline::sentence-transformers
    config: {}
  - provider_id: ${env.WATSONX_API_KEY:+watsonx}
    provider_type: remote::watsonx
    config:
      url: ${env.WATSONX_BASE_URL:=https://us-south.ml.cloud.ibm.com}
      api_key: ${env.WATSONX_API_KEY:=}
      project_id: ${env.WATSONX_PROJECT_ID:=}
  - provider_id: ${env.AZURE_API_KEY:+azure}
    provider_type: remote::azure
    config:
      api_key: ${env.AZURE_API_KEY:=}
      api_base: ${env.AZURE_API_BASE:=}
      api_version: ${env.AZURE_API_VERSION:=}
      api_type: ${env.AZURE_API_TYPE:=}
  - provider_id: ${env.VERTEX_AI_PROJECT:+vertexai}
    provider_type: remote::vertexai
    config:
      project: ${env.VERTEX_AI_PROJECT:=}
      location: ${env.VERTEX_AI_LOCATION:=us-central1}
  - provider_id: ${env.OPENAI_API_KEY:+openai}
    provider_type: remote::openai
    config:
      api_key: ${env.OPENAI_API_KEY:=}
      base_url: ${env.OPENAI_BASE_URL:=https://api.openai.com/v1}
  vector_io:
  - provider_id: milvus
    provider_type: inline::milvus
    config:
      db_path: /opt/app-root/src/.llama/distributions/rh/milvus.db
      kvstore:
        type: sqlite
        namespace: null
        db_path: /opt/app-root/src/.llama/distributions/rh/milvus_registry.db
  - provider_id: ${env.MILVUS_ENDPOINT:+milvus-remote}
    provider_type: remote::milvus
    config:
      uri: ${env.MILVUS_ENDPOINT:=}
      token: ${env.MILVUS_TOKEN:=}
      secure: ${env.MILVUS_SECURE:=}
      consistency_level: ${env.MILVUS_CONSISTENCY_LEVEL:=}
      ca_pem_path: ${env.MILVUS_CA_PEM_PATH:=}
      client_pem_path: ${env.MILVUS_CLIENT_PEM_PATH:=}
      client_key_path: ${env.MILVUS_CLIENT_KEY_PATH:=}
      kvstore:
        type: sqlite
        namespace: null
        db_path: /opt/app-root/src/.llama/distributions/rh/milvus_remote_registry.db
  safety:
    - provider_id: trustyai_fms
      provider_type: remote::trustyai_fms
      module: llama_stack_provider_trustyai_fms==0.2.3
      config:
        orchestrator_url: ${env.FMS_ORCHESTRATOR_URL:=}
        ssl_cert_path: ${env.FMS_SSL_CERT_PATH:=}
        shields: {}
  agents:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      persistence_store:
        type: sqlite
        namespace: null
        db_path: /opt/app-root/src/.llama/distributions/rh/agents_store.db
      responses_store:
        type: sqlite
        db_path: /opt/app-root/src/.llama/distributions/rh/responses_store.db
  eval:
  - provider_id: trustyai_lmeval
    provider_type: remote::trustyai_lmeval
    module: llama_stack_provider_lmeval==0.3.0
    config:
        use_k8s: ${env.TRUSTYAI_LMEVAL_USE_K8S:=true}
        base_url: ${env.VLLM_URL:=}
  - provider_id: ${env.EMBEDDING_MODEL:+trustyai_ragas_inline}
    provider_type: inline::trustyai_ragas
    module: llama_stack_provider_ragas.inline
    config:
      embedding_model: ${env.EMBEDDING_MODEL:=}
  - provider_id: ${env.KUBEFLOW_LLAMA_STACK_URL:+trustyai_ragas_remote}
    provider_type: remote::trustyai_ragas
    module: llama_stack_provider_ragas.remote
    config:
      embedding_model: ${env.EMBEDDING_MODEL:=}
      kubeflow_config:
        results_s3_prefix: ${env.KUBEFLOW_RESULTS_S3_PREFIX:=}
        s3_credentials_secret_name: ${env.KUBEFLOW_S3_CREDENTIALS_SECRET_NAME:=}
        pipelines_endpoint: ${env.KUBEFLOW_PIPELINES_ENDPOINT:=}
        namespace: ${env.KUBEFLOW_NAMESPACE:=}
        llama_stack_url: ${env.KUBEFLOW_LLAMA_STACK_URL:=}
        base_image: ${env.KUBEFLOW_BASE_IMAGE:=}
  datasetio:
  - provider_id: huggingface
    provider_type: remote::huggingface
    config:
      kvstore:
        type: sqlite
        namespace: null
        db_path: /opt/app-root/src/.llama/distributions/rh/huggingface_datasetio.db
  - provider_id: localfs
    provider_type: inline::localfs
    config:
      kvstore:
        type: sqlite
        namespace: null
        db_path: /opt/app-root/src/.llama/distributions/rh/localfs_datasetio.db
  scoring:
  - provider_id: basic
    provider_type: inline::basic
    config: {}
  - provider_id: llm-as-judge
    provider_type: inline::llm-as-judge
    config: {}
  - provider_id: braintrust
    provider_type: inline::braintrust
    config:
      openai_api_key: ${env.OPENAI_API_KEY:=}
  telemetry:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      service_name: "${env.OTEL_SERVICE_NAME:=\u200B}"
      sinks: ${env.TELEMETRY_SINKS:=console,sqlite}
      sqlite_db_path: /opt/app-root/src/.llama/distributions/rh/trace_store.db
      otel_exporter_otlp_endpoint: ${env.OTEL_EXPORTER_OTLP_ENDPOINT:=}
  tool_runtime:
  - provider_id: brave-search
    provider_type: remote::brave-search
    config:
      api_key: ${env.BRAVE_SEARCH_API_KEY:=}
      max_results: 3
  - provider_id: tavily-search
    provider_type: remote::tavily-search
    config:
      api_key: ${env.TAVILY_SEARCH_API_KEY:=}
      max_results: 3
  - provider_id: rag-runtime
    provider_type: inline::rag-runtime
    config: {}
  - provider_id: model-context-protocol
    provider_type: remote::model-context-protocol
    config: {}
  files:
  - provider_id: meta-reference-files
    provider_type: inline::localfs
    config:
      storage_dir: /opt/app-root/src/.llama/distributions/rh/files
      metadata_store:
        type: sqlite
        db_path: /opt/app-root/src/.llama/distributions/rh/files_metadata.db
metadata_store:
  type: sqlite
  db_path: /opt/app-root/src/.llama/distributions/rh/registry.db
inference_store:
  type: sqlite
  db_path: /opt/app-root/src/.llama/distributions/rh/inference_store.db
models:
- metadata: {}
  model_id: ${env.INFERENCE_MODEL:=dummy}
  provider_id: ${env.VLLM_URL:+vllm-inference}
  model_type: llm
- metadata:
    embedding_dimension: 768
  model_id: granite-embedding-125m
  provider_id: sentence-transformers
  provider_model_id: ibm-granite/granite-embedding-125m-english
  model_type: embedding
shields: []
vector_dbs: []
datasets: []
scoring_fns: []
benchmarks: []
tool_groups:
- toolgroup_id: builtin::websearch
  provider_id: tavily-search
- toolgroup_id: builtin::rag
  provider_id: rag-runtime
server:
  port: 8321
